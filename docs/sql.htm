<!DOCTYPE html>
<html lang="en-US"><head>
<meta charset="utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<meta name="template-info" file-name="empty.htm" version="2022-02-09" editor="USP" />
<meta name="author" content="USP" />
<meta name="creation-date" content="2022-03-30" />
<meta name="editor" content="USP" />
<meta name="change-date" content="2022-03-30" />
<meta name="version" content="1" />
<meta name="categories" content="Programming > Database > SQL, Programming > Languages > SQL" />
<meta name="tags" content="Programming, database, language, SQL, DDL, column" />
<meta name="description" content="Column definition is not rocket science." />

<link rel="stylesheet" href="/inc/page.css" />
 
<title>SQL - Structured Query Language - DDL - Columns</title>

</head><body><header id="page-header"></header><div id="main-toolbar"></div><main id="page-content" cbc-default="collapsed">

<h1>Columns</h1>

<p id="page-abstract"></p>

<p>A column definition has the following form:</p>

<figcaption class="syntax">Column definition syntax</figcaption>
<dl class="syntax description-list">

<dt>column-definition</dt>
<dd><a href="#column-name">column-name</a> <a href="#data-type">data-type</a> <a href="#default-clause">default-clause</a> <a href="#identity-column-spec">identity-column-spec</a> <a href="#generation-clause">generation-clause</a> <a href="#column-constraint-def">column-constraint-def</a> <a href="#collate-clause">collate-clause</a></dd>

<dt id="column-name">column-name</dt>
<dd>Identifier, a character string consisting of letters, numbers and the underscore. Must begin with a letter or underscore.</dd>

<dt id="data-type">data-type</dt>
<dd>One of the supported <a href="sql-data-types.htm">SQL data types</a>.</dd>

<dt id="default-clause">default-clause</dt>
<dd>DEFAULT ( default-expression )</dd>
<dd>The <tt>default-expression</tt> can contain literals and functions such as CURRENT_TIMESTAMP.</dd>

<dt id="identity-column-spec">identity-column-spec</dt>
<dd>GENERATED { ALWAYS | BY DEFAULT } AS IDENTITY [ ( <a href="#sequence-generator-options">sequence-generator-options</a> ) ]&hellip;</dd>
<dd>The identity specification look pretty much like the generation-spec further down, but syntax options are somewhat different.</dd>

<dt id="sequence-generator-options">sequence-generator-options</dt>
<dd>a combination of the one or more of the following:
<dl class="unspaced-items">
<dt>START WITH signed-numeric-literal</dt>
<dt>INCREMEENT BY signed-numeric-literal</dt>
<dt>MINVALUE signed-numeric-literal</dt>
<dt>MAXVALUE signed-numeric-literal</dt>
<dt>[ NO ] CYCLE</dt>
</dl></dd>

<dt id="generation-clause">generation-clause</dt>
<dd>GENERATED ALWAYS AS ( value-expression )</dd>
<dd>where <a href="https://ronsavage.github.io/SQL/sql-2003-2.bnf.html#value%20expression" target="ron-savage"><tt>value-expression</tt></a> can be a column expression, a common value expression, a row value expression, et cetera.</dd>

<dt id="column-constraint-def">column-constraint-def</dt>
<dd>[ CONSTRAINT name ] <a href="column-constraint">column-constraint</a> [ <a href="constraint-characteristic">constraint-characteristic</a> ]</dd>
<dd>where the constraint name must follow the rules for names.</dd>

<dt id="column-constraint">column-constraint</dt>
<dd>is one of
<dl class="unspaced-items">
<dt>NOT NULL</dt>
<dt>UNIQUE | PRIMARY KEY</dt>
<dt>REFERENCES table-name ( <a href="column-name-list">column-name-list</a> )</dt>
<dt>CHECK ( boolean value expression )</dt>
<dd>The expression in the check constraint must evaluate to a boolean value (true or false). If the expression evaluation returns false, the opearation is canceled.</dd>
</dl></dd>

<dt id="column-name-list">column-name-list</dt>
<dd>A comma-separated list of column names, which appear in the referenced table.</dd>

<dt id="constraint-characteristic">constraint-characteristic</dt>
<dd>INITIALLY { DEFERRED | IMMEDIATE } [ [ NOT ] DEFERRABLE ]</dd>

<dt id="collate-clause">collate-clause</dt>
<dd>COLLATE collation-name</dd>
<dd>The collation affects string comparisons and sorting.</dd>
  
</dl>


<h2 cbc>Generated Columns</h2><div>

<p>A generated column in general contains generated data, hence the name. But the term "contains" is not always correct, or only correct if the value is actually stored.</p>

<ul>
<li>Generated virtual columns</li>
<li>Generated stored columns</li>
<li>Generated by default</li>
</ul>

<h3>Generated Virtual Columns</h3><div>

<p>A generated virtual column delivers data from other columns and/or function calls. Examples:</p>

<figcaption class="listing">Virtual columns</figcaption>
<pre>
fullName varchar(60) generated 
</pre>
<!-- h3 --></div>

<!-- h2 --></div>

<h2 cbc>References</h2><div>

<dl class="link-list">
<dt><a href="https://ronsavage.github.io/SQL/sql-2003-2.bnf.html#column%20definition">SQL 2003 Syntax</a> by Ron Savage</dt>
</dl>

<!-- h2 --></div>

</main><footer id="page-footer"></footer><script type="module" src="/inc/page.js" ></script></body></html>